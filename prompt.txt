###あなたの役割:
"""
あなたは GraphQL API を要件定義から設計・実装まで一貫して開発できる AI です。
ルールを必ず遵守し、ステップバイステップで考えて出力してください。
"""

###ルール:
"""
- このルールは絶対に遵守してください。
- チャットでのやり取りは日本語で行ってください。
- 不足事項や不明点などがあれば質問や確認をしてください。
- 要求仕様書を遵守し、生成してください。
- あなたが絶対に生成しなければならない成果物は以下の通りです。
    - 要件定義書
    - 画面フロー図 (mermaid)
    - ソースコード
    - プロジェクトのディレクトリ構造
- ソースコードは常に完全なコードを生成して下さい。ソースコード更新において一部分だけを生成するのは禁止です。
- 生成したソースコードは必ずパス・ファイル名を書いてください。
- 200行を越える大きなサイズのソースコードは、ファイルを分割してください。
"""

###要求仕様書
"""
- GraphQL API の構築
- データベースは aiven で実装
- 'コードの技術要件'を遵守し、コードを生成
    - 他に必要なライブラリがあれば追加
- 'APIの仕様要件'、'APIの機能要件'に沿ってコードを生成
- プロジェクトのディレクトリ構造は'プロジェクトディレクトリ構造'をベースに生成
    - その他、必要なディレクトリやファイルがあれば追加
- 'モデル定義'に沿ってコードを生成
"""

###コードの技術要件:
"""
- Python3.12 で構築
- 使用するライブラリ
    - FastAPI == 0.115.5
    - Strawberry-GraphQL[FastAPI] == 0.248.1
    - SQLalchemy == 2.0.36
    - asyncpg == 0.30.0
    - pydantic == 2.9.2
    - uvicorn[standard] == 0.32.0
"""

###APIの仕様要件:
"""
- PDF形式の請求書を作成する API を GraphQL で構築
- 請求書作成フローは次に記載するイメージで行う。
    - 1. 請求書の作成に必要な項目を Mutation リクエスト
    - 2. 項目をもとに請求書作成に必要な処理
    - 3. PDF形式の請求書を作成し、データベースへ保存
    - 4. 項目、請求書URLをデータベースへ登録
    - 5. 登録完了後、invoice_itemテーブルへ登録した全てのレコードを削除
- データの取得フローは次に記載するイメージで行う。
    - 1. Query リクエスト
    - 2. 一覧、又は個別情報を API で返却
- エラーハンドリングの実装
- バリデーションの実装
- 非同期処理が可能な部分は非同期処理で実装
- モデルにリレーション項目がある場合、リレーション項目も同時に登録、編集、削除、読込も行えるように実装
"""

###APIの機能要件:
"""
- ページネーション機能
- フィルタリング・検索・ソート等の機能
    - 請求書番号、顧客名（請求先）、作成日、会社名、会社名カナ等の項目での検索機能
    - 請求書番号、作成日等の項目での並べ替え機能
"""

###プロジェクトディレクトリ構造
"""
api/
│
├── app/
│ ├── __init__.py
│ ├── main.py # FastAPIアプリケーションのエントリーポイント
│ ├── core/
│ │ ├── __init__.py
│ │ ├── config.py # 設定
│ │ └── database.py # データベース接続
│ ├── models/
│ │ ├── __init__.py
│ │ ├── invoice.py # インボイスモデル
│ │ ├── invoice_item.py # インボイス項目モデル
│ │ ├── company.py # 会社モデル
│ │ └── bank_account.py # 銀行口座モデル
│ ├── schemas/
│ │ ├── __init__.py
│ │ ├── invoice.py # インボイススキーマ
│ │ ├── invoice_item.py # インボイス項目スキーマ
│ │ ├── company.py # 会社スキーマ
│ │ └── bank_account.py # 銀行口座スキーマ
│ ├── graphql/
│ │ ├── __init__.py
│ │ ├── types/ # GraphQLタイプ定義
│ │ ├── queries/ # クエリ定義
│ │ └── mutations/ # ミューテーション定義
│ ├── services/
│ │ ├── __init__.py
│ │ ├── pdf.py # PDF生成サービス
│ │ └── invoice.py # インボイスサービス
│ └── utils/
│ ├── __init__.py
│ └── validators.py # カスタムバリデーター
│
├── tests/ # テストファイル
├── .gitignore
└── requirements.txt # 依存関係
"""

###モデル定義
"""
- table_name: invoice
    - id: *Required *Dafault_value(uuid)
    - invoice_number: *Required *Autoincrement
    - due_date: *Validation(date)
    - created_at: *Required *Validation(date) *Dafault_value(today: JST)
    - client_name: *Required
    - total: *Required *Validation(price: JPY) *Auto_input(sum(list[invoice_item.amount of description]))
    - pdf_url: *Required *Validation(url)
    - description: *Required *Relation(invoice_item)
    - company_id: *Required *Relation(company)

- table_name: invoice_item
    - id: *Required *Dafault_value(uuid)
    - item_name: *Required
    - unit_price: *Required *Validation(price: JPY)
    - quantity: *Required
    - tax_rate: *Required *Validation(percent: min_length=1, max_length=2, integer) *Dafault_value(10)
    - amount: *Required *Validation(price: JPY) *Auto_input((unit_price * quantity) + (unit_price * quantity * tax_rate / 100))
    - remarks:
    - invoice_id: *Required *Relation(invoice)

- table_name: company
    - id: *Required *Dafault_value(uuid)
    - name: *Required
    - name_kana: *Required *Validation(kana)
    - postal_code: *Required *Validation(postal_code: length=7)
    - address: *Required
    - building_name:
    - room_number:
    - phone: *Required *Validation(phone: min_length=10, max_length=11)
    - fax: *Validation(fax: min_length=10, max_length=11)
    - mail: *Validation(mail_address)
    - hp: *Validation(url)
    - president: *Required
    - company_seal: *Validation(url)
    - invoice_registration_number: *Validation('T' + [0-9]{13}) # 'T'から始まり、'T'と13桁の半角数字からなる登録番号
    - business_name:
    - business_name_kana: *Validation(kana)
    - business_hp: *Validation(url)
    - business_sns_links: *Validation(url)
    - bank_account: *Relation(bank_account)
    - invoice: *Relation(invoice)

- table_name: bank_account
    - id: *Required *Dafault_value(uuid)
    - bank_name: *Required
    - branch_name: *Required
    - account_type: *Required *Validation(account_type: enum['普通口座', '当座'])
    - account_number: *Required
    - account_holder: *Required
    - holder_id: *Required *Relation(company)
"""
